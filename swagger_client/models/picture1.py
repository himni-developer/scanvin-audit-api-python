# coding: utf-8

"""
    AUDITORIA

    # Introducão  Seja bem-vindo a documentação da API do [SCANVIN](https://scanvin.com.br) para auditorias    Nossa API foi criada utilizando o padrão [REST](https://restfulapi.net/) e [HATEOAS](https://restfulapi.net/hateoas/), possibilitando a integração de seu sistema ao nosso, e está documentada abaixo.  # Como usar a API?  Logo a seguir você encontrará todos os recursos e métodos suportados pela API, sendo que essa página possibilita que você teste os recursos e métodos diretamente através dela.  # Autenticação  Você precisa de uma [API KEY](https://en.wikipedia.org/wiki/Application_programming_interface_key#HTTP_APIs) para identificar a conta que está realizando solicitações para a API. Você pode obter seu token de autenticação no seu [Painel do Cliente](https://auditoria.scanvin.com.br/client/).  Insira seu token no campo que se encontra topo desta página para testar os métodos da API.  # Webhook  Você também deve configurar seu [Webhook](https://en.wikipedia.org/wiki/Webhook) no [Painel do Cliente](https://auditoria.scanvin.com.br/client/webhook). Quando os resultados da auditoria estiverem disponíveis, uma notificação será enviada para a URL informada, via [HTTP POST](https://en.wikipedia.org/wiki/POST_(HTTP)). A notificação possui ```Content-type``` do tipo ```application/json```. O [JSON](https://en.wikipedia.org/wiki/JSON) postado contém um único campo, ```notification_id```, que contém o identificador único do evento que gerou a notificação. Deve-se então chamar o endpoint ```Inspection - Get Inspection```, informando esse mesmo identificador único, para recuperar os dados da vistoria, e da auditoria realizada.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Picture1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'int',
        'hash': 'str',
        'path_original': 'str',
        'path_updated': 'str',
        'notes': 'str',
        'bytes': 'int',
        'lat': 'str',
        'lng': 'str'
    }

    attribute_map = {
        'type': 'type',
        'hash': 'hash',
        'path_original': 'path_original',
        'path_updated': 'path_updated',
        'notes': 'notes',
        'bytes': 'bytes',
        'lat': 'lat',
        'lng': 'lng'
    }

    def __init__(self, type=None, hash=None, path_original=None, path_updated=None, notes=None, bytes=None, lat=None, lng=None):  # noqa: E501
        """Picture1 - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._hash = None
        self._path_original = None
        self._path_updated = None
        self._notes = None
        self._bytes = None
        self._lat = None
        self._lng = None
        self.discriminator = None
        self.type = type
        self.hash = hash
        self.path_original = path_original
        self.path_updated = path_updated
        self.notes = notes
        self.bytes = bytes
        self.lat = lat
        self.lng = lng

    @property
    def type(self):
        """Gets the type of this Picture1.  # noqa: E501

        Tipo da imagem. Os tipos disponíveis podem ser obtidos acessando o endpoint ```Inspection - Get Types```.  # noqa: E501

        :return: The type of this Picture1.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Picture1.

        Tipo da imagem. Os tipos disponíveis podem ser obtidos acessando o endpoint ```Inspection - Get Types```.  # noqa: E501

        :param type: The type of this Picture1.  # noqa: E501
        :type: int
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def hash(self):
        """Gets the hash of this Picture1.  # noqa: E501

        Hash do arquivo da imagem.  # noqa: E501

        :return: The hash of this Picture1.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this Picture1.

        Hash do arquivo da imagem.  # noqa: E501

        :param hash: The hash of this Picture1.  # noqa: E501
        :type: str
        """
        if hash is None:
            raise ValueError("Invalid value for `hash`, must not be `None`")  # noqa: E501

        self._hash = hash

    @property
    def path_original(self):
        """Gets the path_original of this Picture1.  # noqa: E501

        URL original da imagem, fornecida pelo cliente.  # noqa: E501

        :return: The path_original of this Picture1.  # noqa: E501
        :rtype: str
        """
        return self._path_original

    @path_original.setter
    def path_original(self, path_original):
        """Sets the path_original of this Picture1.

        URL original da imagem, fornecida pelo cliente.  # noqa: E501

        :param path_original: The path_original of this Picture1.  # noqa: E501
        :type: str
        """
        if path_original is None:
            raise ValueError("Invalid value for `path_original`, must not be `None`")  # noqa: E501

        self._path_original = path_original

    @property
    def path_updated(self):
        """Gets the path_updated of this Picture1.  # noqa: E501

        URL da imagem editada, caso o auditor tenha decido realizar algum tipo de edição.  # noqa: E501

        :return: The path_updated of this Picture1.  # noqa: E501
        :rtype: str
        """
        return self._path_updated

    @path_updated.setter
    def path_updated(self, path_updated):
        """Sets the path_updated of this Picture1.

        URL da imagem editada, caso o auditor tenha decido realizar algum tipo de edição.  # noqa: E501

        :param path_updated: The path_updated of this Picture1.  # noqa: E501
        :type: str
        """
        if path_updated is None:
            raise ValueError("Invalid value for `path_updated`, must not be `None`")  # noqa: E501

        self._path_updated = path_updated

    @property
    def notes(self):
        """Gets the notes of this Picture1.  # noqa: E501

        Observações referentes à imagem, adicionadas pelo auditor.  # noqa: E501

        :return: The notes of this Picture1.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Picture1.

        Observações referentes à imagem, adicionadas pelo auditor.  # noqa: E501

        :param notes: The notes of this Picture1.  # noqa: E501
        :type: str
        """
        if notes is None:
            raise ValueError("Invalid value for `notes`, must not be `None`")  # noqa: E501

        self._notes = notes

    @property
    def bytes(self):
        """Gets the bytes of this Picture1.  # noqa: E501

        Tamanho em bytes do arquivo da imagem.  # noqa: E501

        :return: The bytes of this Picture1.  # noqa: E501
        :rtype: int
        """
        return self._bytes

    @bytes.setter
    def bytes(self, bytes):
        """Sets the bytes of this Picture1.

        Tamanho em bytes do arquivo da imagem.  # noqa: E501

        :param bytes: The bytes of this Picture1.  # noqa: E501
        :type: int
        """
        if bytes is None:
            raise ValueError("Invalid value for `bytes`, must not be `None`")  # noqa: E501

        self._bytes = bytes

    @property
    def lat(self):
        """Gets the lat of this Picture1.  # noqa: E501

        Latitude em que a imagem foi fotografada.  # noqa: E501

        :return: The lat of this Picture1.  # noqa: E501
        :rtype: str
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this Picture1.

        Latitude em que a imagem foi fotografada.  # noqa: E501

        :param lat: The lat of this Picture1.  # noqa: E501
        :type: str
        """
        if lat is None:
            raise ValueError("Invalid value for `lat`, must not be `None`")  # noqa: E501

        self._lat = lat

    @property
    def lng(self):
        """Gets the lng of this Picture1.  # noqa: E501

        Longitude em que a imagem foi fotografada.  # noqa: E501

        :return: The lng of this Picture1.  # noqa: E501
        :rtype: str
        """
        return self._lng

    @lng.setter
    def lng(self, lng):
        """Sets the lng of this Picture1.

        Longitude em que a imagem foi fotografada.  # noqa: E501

        :param lng: The lng of this Picture1.  # noqa: E501
        :type: str
        """
        if lng is None:
            raise ValueError("Invalid value for `lng`, must not be `None`")  # noqa: E501

        self._lng = lng

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Picture1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Picture1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
