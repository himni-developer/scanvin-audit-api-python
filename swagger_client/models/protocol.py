# coding: utf-8

"""
    AUDITORIA

    # Introducão  Seja bem-vindo a documentação da API do [SCANVIN](https://scanvin.com.br) para auditorias    Nossa API foi criada utilizando o padrão [REST](https://restfulapi.net/) e [HATEOAS](https://restfulapi.net/hateoas/), possibilitando a integração de seu sistema ao nosso, e está documentada abaixo.  # Como usar a API?  Logo a seguir você encontrará todos os recursos e métodos suportados pela API, sendo que essa página possibilita que você teste os recursos e métodos diretamente através dela.  # Autenticação  Você precisa de uma [API KEY](https://en.wikipedia.org/wiki/Application_programming_interface_key#HTTP_APIs) para identificar a conta que está realizando solicitações para a API. Você pode obter seu token de autenticação no seu [Painel do Cliente](https://auditoria.scanvin.com.br/client/).  Insira seu token no campo que se encontra topo desta página para testar os métodos da API.  # Webhook  Você também deve configurar seu [Webhook](https://en.wikipedia.org/wiki/Webhook) no [Painel do Cliente](https://auditoria.scanvin.com.br/client/webhook). Quando os resultados da auditoria estiverem disponíveis, uma notificação será enviada para a URL informada, via [HTTP POST](https://en.wikipedia.org/wiki/POST_(HTTP)). A notificação possui ```Content-type``` do tipo ```application/json```. O [JSON](https://en.wikipedia.org/wiki/JSON) postado contém um único campo, ```notification_id```, que contém o identificador único do evento que gerou a notificação. Deve-se então chamar o endpoint ```Inspection - Get Inspection```, informando esse mesmo identificador único, para recuperar os dados da vistoria, e da auditoria realizada.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Protocol(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'str',
        'car_engine': 'str',
        'car_plate': 'str',
        'car_state': 'str',
        'car_vin': 'str',
        'car_renavam': 'str',
        'engine_accepted': 'bool',
        'vin_accepted': 'bool',
        'surveyor_email': 'str',
        'pictures': 'list[Picture1]'
    }

    attribute_map = {
        'client_id': 'client_id',
        'car_engine': 'car_engine',
        'car_plate': 'car_plate',
        'car_state': 'car_state',
        'car_vin': 'car_vin',
        'car_renavam': 'car_renavam',
        'engine_accepted': 'engine_accepted',
        'vin_accepted': 'vin_accepted',
        'surveyor_email': 'surveyor_email',
        'pictures': 'pictures'
    }

    def __init__(self, client_id=None, car_engine=None, car_plate=None, car_state=None, car_vin=None, car_renavam=None, engine_accepted=None, vin_accepted=None, surveyor_email=None, pictures=None):  # noqa: E501
        """Protocol - a model defined in Swagger"""  # noqa: E501
        self._client_id = None
        self._car_engine = None
        self._car_plate = None
        self._car_state = None
        self._car_vin = None
        self._car_renavam = None
        self._engine_accepted = None
        self._vin_accepted = None
        self._surveyor_email = None
        self._pictures = None
        self.discriminator = None
        self.client_id = client_id
        if car_engine is not None:
            self.car_engine = car_engine
        self.car_plate = car_plate
        self.car_state = car_state
        self.car_vin = car_vin
        self.car_renavam = car_renavam
        self.engine_accepted = engine_accepted
        self.vin_accepted = vin_accepted
        self.surveyor_email = surveyor_email
        self.pictures = pictures

    @property
    def client_id(self):
        """Gets the client_id of this Protocol.  # noqa: E501

        Número ou ID do protocolo fornecidos pelo cliente.  # noqa: E501

        :return: The client_id of this Protocol.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Protocol.

        Número ou ID do protocolo fornecidos pelo cliente.  # noqa: E501

        :param client_id: The client_id of this Protocol.  # noqa: E501
        :type: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def car_engine(self):
        """Gets the car_engine of this Protocol.  # noqa: E501

        Número do motor.  # noqa: E501

        :return: The car_engine of this Protocol.  # noqa: E501
        :rtype: str
        """
        return self._car_engine

    @car_engine.setter
    def car_engine(self, car_engine):
        """Sets the car_engine of this Protocol.

        Número do motor.  # noqa: E501

        :param car_engine: The car_engine of this Protocol.  # noqa: E501
        :type: str
        """

        self._car_engine = car_engine

    @property
    def car_plate(self):
        """Gets the car_plate of this Protocol.  # noqa: E501

        Número da placa de identificação veicular.  # noqa: E501

        :return: The car_plate of this Protocol.  # noqa: E501
        :rtype: str
        """
        return self._car_plate

    @car_plate.setter
    def car_plate(self, car_plate):
        """Sets the car_plate of this Protocol.

        Número da placa de identificação veicular.  # noqa: E501

        :param car_plate: The car_plate of this Protocol.  # noqa: E501
        :type: str
        """
        if car_plate is None:
            raise ValueError("Invalid value for `car_plate`, must not be `None`")  # noqa: E501

        self._car_plate = car_plate

    @property
    def car_state(self):
        """Gets the car_state of this Protocol.  # noqa: E501

        UF da placa de identificação veicular.  # noqa: E501

        :return: The car_state of this Protocol.  # noqa: E501
        :rtype: str
        """
        return self._car_state

    @car_state.setter
    def car_state(self, car_state):
        """Sets the car_state of this Protocol.

        UF da placa de identificação veicular.  # noqa: E501

        :param car_state: The car_state of this Protocol.  # noqa: E501
        :type: str
        """
        if car_state is None:
            raise ValueError("Invalid value for `car_state`, must not be `None`")  # noqa: E501

        self._car_state = car_state

    @property
    def car_vin(self):
        """Gets the car_vin of this Protocol.  # noqa: E501

        Número de chassi.  # noqa: E501

        :return: The car_vin of this Protocol.  # noqa: E501
        :rtype: str
        """
        return self._car_vin

    @car_vin.setter
    def car_vin(self, car_vin):
        """Sets the car_vin of this Protocol.

        Número de chassi.  # noqa: E501

        :param car_vin: The car_vin of this Protocol.  # noqa: E501
        :type: str
        """
        if car_vin is None:
            raise ValueError("Invalid value for `car_vin`, must not be `None`")  # noqa: E501

        self._car_vin = car_vin

    @property
    def car_renavam(self):
        """Gets the car_renavam of this Protocol.  # noqa: E501

        Número do RENAVAM.  # noqa: E501

        :return: The car_renavam of this Protocol.  # noqa: E501
        :rtype: str
        """
        return self._car_renavam

    @car_renavam.setter
    def car_renavam(self, car_renavam):
        """Sets the car_renavam of this Protocol.

        Número do RENAVAM.  # noqa: E501

        :param car_renavam: The car_renavam of this Protocol.  # noqa: E501
        :type: str
        """
        if car_renavam is None:
            raise ValueError("Invalid value for `car_renavam`, must not be `None`")  # noqa: E501

        self._car_renavam = car_renavam

    @property
    def engine_accepted(self):
        """Gets the engine_accepted of this Protocol.  # noqa: E501

        Informa se o vistoriador aprovou ou reprovou a numeração do motor.  # noqa: E501

        :return: The engine_accepted of this Protocol.  # noqa: E501
        :rtype: bool
        """
        return self._engine_accepted

    @engine_accepted.setter
    def engine_accepted(self, engine_accepted):
        """Sets the engine_accepted of this Protocol.

        Informa se o vistoriador aprovou ou reprovou a numeração do motor.  # noqa: E501

        :param engine_accepted: The engine_accepted of this Protocol.  # noqa: E501
        :type: bool
        """
        if engine_accepted is None:
            raise ValueError("Invalid value for `engine_accepted`, must not be `None`")  # noqa: E501

        self._engine_accepted = engine_accepted

    @property
    def vin_accepted(self):
        """Gets the vin_accepted of this Protocol.  # noqa: E501

        Informa se o vistoriador aprovou ou reprovação a numeração do chassi.  # noqa: E501

        :return: The vin_accepted of this Protocol.  # noqa: E501
        :rtype: bool
        """
        return self._vin_accepted

    @vin_accepted.setter
    def vin_accepted(self, vin_accepted):
        """Sets the vin_accepted of this Protocol.

        Informa se o vistoriador aprovou ou reprovação a numeração do chassi.  # noqa: E501

        :param vin_accepted: The vin_accepted of this Protocol.  # noqa: E501
        :type: bool
        """
        if vin_accepted is None:
            raise ValueError("Invalid value for `vin_accepted`, must not be `None`")  # noqa: E501

        self._vin_accepted = vin_accepted

    @property
    def surveyor_email(self):
        """Gets the surveyor_email of this Protocol.  # noqa: E501

        E-mail do vistoriador.  # noqa: E501

        :return: The surveyor_email of this Protocol.  # noqa: E501
        :rtype: str
        """
        return self._surveyor_email

    @surveyor_email.setter
    def surveyor_email(self, surveyor_email):
        """Sets the surveyor_email of this Protocol.

        E-mail do vistoriador.  # noqa: E501

        :param surveyor_email: The surveyor_email of this Protocol.  # noqa: E501
        :type: str
        """
        if surveyor_email is None:
            raise ValueError("Invalid value for `surveyor_email`, must not be `None`")  # noqa: E501

        self._surveyor_email = surveyor_email

    @property
    def pictures(self):
        """Gets the pictures of this Protocol.  # noqa: E501

        Imagens do veículo.  # noqa: E501

        :return: The pictures of this Protocol.  # noqa: E501
        :rtype: list[Picture1]
        """
        return self._pictures

    @pictures.setter
    def pictures(self, pictures):
        """Sets the pictures of this Protocol.

        Imagens do veículo.  # noqa: E501

        :param pictures: The pictures of this Protocol.  # noqa: E501
        :type: list[Picture1]
        """
        if pictures is None:
            raise ValueError("Invalid value for `pictures`, must not be `None`")  # noqa: E501

        self._pictures = pictures

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Protocol, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Protocol):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
