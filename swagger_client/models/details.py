# coding: utf-8

"""
    AUDITORIA

    # Introducão  Seja bem-vindo a documentação da API do [SCANVIN](https://scanvin.com.br) para auditorias    Nossa API foi criada utilizando o padrão [REST](https://restfulapi.net/) e [HATEOAS](https://restfulapi.net/hateoas/), possibilitando a integração de seu sistema ao nosso, e está documentada abaixo.  # Como usar a API?  Logo a seguir você encontrará todos os recursos e métodos suportados pela API, sendo que essa página possibilita que você teste os recursos e métodos diretamente através dela.  # Autenticação  Você precisa de uma [API KEY](https://en.wikipedia.org/wiki/Application_programming_interface_key#HTTP_APIs) para identificar a conta que está realizando solicitações para a API. Você pode obter seu token de autenticação no seu [Painel do Cliente](https://auditoria.scanvin.com.br/client/).  Insira seu token no campo que se encontra topo desta página para testar os métodos da API.  # Webhook  Você também deve configurar seu [Webhook](https://en.wikipedia.org/wiki/Webhook) no [Painel do Cliente](https://auditoria.scanvin.com.br/client/webhook). Quando os resultados da auditoria estiverem disponíveis, uma notificação será enviada para a URL informada, via [HTTP POST](https://en.wikipedia.org/wiki/POST_(HTTP)). A notificação possui ```Content-type``` do tipo ```application/json```. O [JSON](https://en.wikipedia.org/wiki/JSON) postado contém um único campo, ```notification_id```, que contém o identificador único do evento que gerou a notificação. Deve-se então chamar o endpoint ```Inspection - Get Inspection```, informando esse mesmo identificador único, para recuperar os dados da vistoria, e da auditoria realizada.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Details(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auditor': 'str',
        'started_at': 'str',
        'ended_at': 'str'
    }

    attribute_map = {
        'auditor': 'auditor',
        'started_at': 'started_at',
        'ended_at': 'ended_at'
    }

    def __init__(self, auditor=None, started_at=None, ended_at=None):  # noqa: E501
        """Details - a model defined in Swagger"""  # noqa: E501
        self._auditor = None
        self._started_at = None
        self._ended_at = None
        self.discriminator = None
        self.auditor = auditor
        self.started_at = started_at
        self.ended_at = ended_at

    @property
    def auditor(self):
        """Gets the auditor of this Details.  # noqa: E501

        E-mail do auditor.  # noqa: E501

        :return: The auditor of this Details.  # noqa: E501
        :rtype: str
        """
        return self._auditor

    @auditor.setter
    def auditor(self, auditor):
        """Sets the auditor of this Details.

        E-mail do auditor.  # noqa: E501

        :param auditor: The auditor of this Details.  # noqa: E501
        :type: str
        """
        if auditor is None:
            raise ValueError("Invalid value for `auditor`, must not be `None`")  # noqa: E501

        self._auditor = auditor

    @property
    def started_at(self):
        """Gets the started_at of this Details.  # noqa: E501

        Início da auditoria.  # noqa: E501

        :return: The started_at of this Details.  # noqa: E501
        :rtype: str
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this Details.

        Início da auditoria.  # noqa: E501

        :param started_at: The started_at of this Details.  # noqa: E501
        :type: str
        """
        if started_at is None:
            raise ValueError("Invalid value for `started_at`, must not be `None`")  # noqa: E501

        self._started_at = started_at

    @property
    def ended_at(self):
        """Gets the ended_at of this Details.  # noqa: E501

        Término da auditoria.  # noqa: E501

        :return: The ended_at of this Details.  # noqa: E501
        :rtype: str
        """
        return self._ended_at

    @ended_at.setter
    def ended_at(self, ended_at):
        """Sets the ended_at of this Details.

        Término da auditoria.  # noqa: E501

        :param ended_at: The ended_at of this Details.  # noqa: E501
        :type: str
        """
        if ended_at is None:
            raise ValueError("Invalid value for `ended_at`, must not be `None`")  # noqa: E501

        self._ended_at = ended_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Details, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Details):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
