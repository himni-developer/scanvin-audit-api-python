# coding: utf-8

"""
    AUDITORIA

    # Introducão  Seja bem-vindo a documentação da API do [SCANVIN](https://scanvin.com.br) para auditorias    Nossa API foi criada utilizando o padrão [REST](https://restfulapi.net/) e [HATEOAS](https://restfulapi.net/hateoas/), possibilitando a integração de seu sistema ao nosso, e está documentada abaixo.  # Como usar a API?  Logo a seguir você encontrará todos os recursos e métodos suportados pela API, sendo que essa página possibilita que você teste os recursos e métodos diretamente através dela.  # Autenticação  Você precisa de uma [API KEY](https://en.wikipedia.org/wiki/Application_programming_interface_key#HTTP_APIs) para identificar a conta que está realizando solicitações para a API. Você pode obter seu token de autenticação no seu [Painel do Cliente](https://auditoria.scanvin.com.br/client/).  Insira seu token no campo que se encontra topo desta página para testar os métodos da API.  # Webhook  Você também deve configurar seu [Webhook](https://en.wikipedia.org/wiki/Webhook) no [Painel do Cliente](https://auditoria.scanvin.com.br/client/webhook). Quando os resultados da auditoria estiverem disponíveis, uma notificação será enviada para a URL informada, via [HTTP POST](https://en.wikipedia.org/wiki/POST_(HTTP)). A notificação possui ```Content-type``` do tipo ```application/json```. O [JSON](https://en.wikipedia.org/wiki/JSON) postado contém um único campo, ```notification_id```, que contém o identificador único do evento que gerou a notificação. Deve-se então chamar o endpoint ```Inspection - Get Inspection```, informando esse mesmo identificador único, para recuperar os dados da vistoria, e da auditoria realizada.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Problems(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'extinguisher': 'bool',
        'hodometer': 'bool',
        'seal': 'bool',
        'fl_alert': 'bool',
        'fr_alert': 'bool',
        'rl_alert': 'bool',
        'rr_alert': 'bool',
        'fl_headlight': 'bool',
        'fr_headlight': 'bool',
        'rl_headlight': 'bool',
        'rr_headlight': 'bool'
    }

    attribute_map = {
        'extinguisher': 'extinguisher',
        'hodometer': 'hodometer',
        'seal': 'seal',
        'fl_alert': 'fl_alert',
        'fr_alert': 'fr_alert',
        'rl_alert': 'rl_alert',
        'rr_alert': 'rr_alert',
        'fl_headlight': 'fl_headlight',
        'fr_headlight': 'fr_headlight',
        'rl_headlight': 'rl_headlight',
        'rr_headlight': 'rr_headlight'
    }

    def __init__(self, extinguisher=None, hodometer=None, seal=None, fl_alert=None, fr_alert=None, rl_alert=None, rr_alert=None, fl_headlight=None, fr_headlight=None, rl_headlight=None, rr_headlight=None):  # noqa: E501
        """Problems - a model defined in Swagger"""  # noqa: E501
        self._extinguisher = None
        self._hodometer = None
        self._seal = None
        self._fl_alert = None
        self._fr_alert = None
        self._rl_alert = None
        self._rr_alert = None
        self._fl_headlight = None
        self._fr_headlight = None
        self._rl_headlight = None
        self._rr_headlight = None
        self.discriminator = None
        self.extinguisher = extinguisher
        self.hodometer = hodometer
        self.seal = seal
        self.fl_alert = fl_alert
        self.fr_alert = fr_alert
        self.rl_alert = rl_alert
        self.rr_alert = rr_alert
        self.fl_headlight = fl_headlight
        self.fr_headlight = fr_headlight
        self.rl_headlight = rl_headlight
        self.rr_headlight = rr_headlight

    @property
    def extinguisher(self):
        """Gets the extinguisher of this Problems.  # noqa: E501

        Informa se o extintor está com problemas.  # noqa: E501

        :return: The extinguisher of this Problems.  # noqa: E501
        :rtype: bool
        """
        return self._extinguisher

    @extinguisher.setter
    def extinguisher(self, extinguisher):
        """Sets the extinguisher of this Problems.

        Informa se o extintor está com problemas.  # noqa: E501

        :param extinguisher: The extinguisher of this Problems.  # noqa: E501
        :type: bool
        """
        if extinguisher is None:
            raise ValueError("Invalid value for `extinguisher`, must not be `None`")  # noqa: E501

        self._extinguisher = extinguisher

    @property
    def hodometer(self):
        """Gets the hodometer of this Problems.  # noqa: E501

        Informa se o hodômetro está com problemas.  # noqa: E501

        :return: The hodometer of this Problems.  # noqa: E501
        :rtype: bool
        """
        return self._hodometer

    @hodometer.setter
    def hodometer(self, hodometer):
        """Sets the hodometer of this Problems.

        Informa se o hodômetro está com problemas.  # noqa: E501

        :param hodometer: The hodometer of this Problems.  # noqa: E501
        :type: bool
        """
        if hodometer is None:
            raise ValueError("Invalid value for `hodometer`, must not be `None`")  # noqa: E501

        self._hodometer = hodometer

    @property
    def seal(self):
        """Gets the seal of this Problems.  # noqa: E501

        Informa se o lacre está com problemas.  # noqa: E501

        :return: The seal of this Problems.  # noqa: E501
        :rtype: bool
        """
        return self._seal

    @seal.setter
    def seal(self, seal):
        """Sets the seal of this Problems.

        Informa se o lacre está com problemas.  # noqa: E501

        :param seal: The seal of this Problems.  # noqa: E501
        :type: bool
        """
        if seal is None:
            raise ValueError("Invalid value for `seal`, must not be `None`")  # noqa: E501

        self._seal = seal

    @property
    def fl_alert(self):
        """Gets the fl_alert of this Problems.  # noqa: E501

        Informa se o alerta frontal esquerdo está com problemas.  # noqa: E501

        :return: The fl_alert of this Problems.  # noqa: E501
        :rtype: bool
        """
        return self._fl_alert

    @fl_alert.setter
    def fl_alert(self, fl_alert):
        """Sets the fl_alert of this Problems.

        Informa se o alerta frontal esquerdo está com problemas.  # noqa: E501

        :param fl_alert: The fl_alert of this Problems.  # noqa: E501
        :type: bool
        """
        if fl_alert is None:
            raise ValueError("Invalid value for `fl_alert`, must not be `None`")  # noqa: E501

        self._fl_alert = fl_alert

    @property
    def fr_alert(self):
        """Gets the fr_alert of this Problems.  # noqa: E501

        Informa se o alerta frontal direito está com problemas.  # noqa: E501

        :return: The fr_alert of this Problems.  # noqa: E501
        :rtype: bool
        """
        return self._fr_alert

    @fr_alert.setter
    def fr_alert(self, fr_alert):
        """Sets the fr_alert of this Problems.

        Informa se o alerta frontal direito está com problemas.  # noqa: E501

        :param fr_alert: The fr_alert of this Problems.  # noqa: E501
        :type: bool
        """
        if fr_alert is None:
            raise ValueError("Invalid value for `fr_alert`, must not be `None`")  # noqa: E501

        self._fr_alert = fr_alert

    @property
    def rl_alert(self):
        """Gets the rl_alert of this Problems.  # noqa: E501

        Informa se o alerta traseiro esquerdo está com problemas.  # noqa: E501

        :return: The rl_alert of this Problems.  # noqa: E501
        :rtype: bool
        """
        return self._rl_alert

    @rl_alert.setter
    def rl_alert(self, rl_alert):
        """Sets the rl_alert of this Problems.

        Informa se o alerta traseiro esquerdo está com problemas.  # noqa: E501

        :param rl_alert: The rl_alert of this Problems.  # noqa: E501
        :type: bool
        """
        if rl_alert is None:
            raise ValueError("Invalid value for `rl_alert`, must not be `None`")  # noqa: E501

        self._rl_alert = rl_alert

    @property
    def rr_alert(self):
        """Gets the rr_alert of this Problems.  # noqa: E501

        Informa se o alerta traseiro direito está com problemas.  # noqa: E501

        :return: The rr_alert of this Problems.  # noqa: E501
        :rtype: bool
        """
        return self._rr_alert

    @rr_alert.setter
    def rr_alert(self, rr_alert):
        """Sets the rr_alert of this Problems.

        Informa se o alerta traseiro direito está com problemas.  # noqa: E501

        :param rr_alert: The rr_alert of this Problems.  # noqa: E501
        :type: bool
        """
        if rr_alert is None:
            raise ValueError("Invalid value for `rr_alert`, must not be `None`")  # noqa: E501

        self._rr_alert = rr_alert

    @property
    def fl_headlight(self):
        """Gets the fl_headlight of this Problems.  # noqa: E501

        Informa se o farol frontal esquerdo está com problemas.  # noqa: E501

        :return: The fl_headlight of this Problems.  # noqa: E501
        :rtype: bool
        """
        return self._fl_headlight

    @fl_headlight.setter
    def fl_headlight(self, fl_headlight):
        """Sets the fl_headlight of this Problems.

        Informa se o farol frontal esquerdo está com problemas.  # noqa: E501

        :param fl_headlight: The fl_headlight of this Problems.  # noqa: E501
        :type: bool
        """
        if fl_headlight is None:
            raise ValueError("Invalid value for `fl_headlight`, must not be `None`")  # noqa: E501

        self._fl_headlight = fl_headlight

    @property
    def fr_headlight(self):
        """Gets the fr_headlight of this Problems.  # noqa: E501

        Informa se o farol frontal direito está com problemas.  # noqa: E501

        :return: The fr_headlight of this Problems.  # noqa: E501
        :rtype: bool
        """
        return self._fr_headlight

    @fr_headlight.setter
    def fr_headlight(self, fr_headlight):
        """Sets the fr_headlight of this Problems.

        Informa se o farol frontal direito está com problemas.  # noqa: E501

        :param fr_headlight: The fr_headlight of this Problems.  # noqa: E501
        :type: bool
        """
        if fr_headlight is None:
            raise ValueError("Invalid value for `fr_headlight`, must not be `None`")  # noqa: E501

        self._fr_headlight = fr_headlight

    @property
    def rl_headlight(self):
        """Gets the rl_headlight of this Problems.  # noqa: E501

        Informa se o farol traseiro esquerdo está com problemas.  # noqa: E501

        :return: The rl_headlight of this Problems.  # noqa: E501
        :rtype: bool
        """
        return self._rl_headlight

    @rl_headlight.setter
    def rl_headlight(self, rl_headlight):
        """Sets the rl_headlight of this Problems.

        Informa se o farol traseiro esquerdo está com problemas.  # noqa: E501

        :param rl_headlight: The rl_headlight of this Problems.  # noqa: E501
        :type: bool
        """
        if rl_headlight is None:
            raise ValueError("Invalid value for `rl_headlight`, must not be `None`")  # noqa: E501

        self._rl_headlight = rl_headlight

    @property
    def rr_headlight(self):
        """Gets the rr_headlight of this Problems.  # noqa: E501

        Informa se o farol traseiro direito está com problemas.  # noqa: E501

        :return: The rr_headlight of this Problems.  # noqa: E501
        :rtype: bool
        """
        return self._rr_headlight

    @rr_headlight.setter
    def rr_headlight(self, rr_headlight):
        """Sets the rr_headlight of this Problems.

        Informa se o farol traseiro direito está com problemas.  # noqa: E501

        :param rr_headlight: The rr_headlight of this Problems.  # noqa: E501
        :type: bool
        """
        if rr_headlight is None:
            raise ValueError("Invalid value for `rr_headlight`, must not be `None`")  # noqa: E501

        self._rr_headlight = rr_headlight

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Problems, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Problems):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
